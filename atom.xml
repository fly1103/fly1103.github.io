<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Flyingcat</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fly1103.com/"/>
  <updated>2019-12-22T08:38:04.914Z</updated>
  <id>http://fly1103.com/</id>
  
  <author>
    <name>Flyingcat</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器学习-KNN</title>
    <link href="http://fly1103.com/2019/12/21/knn/"/>
    <id>http://fly1103.com/2019/12/21/knn/</id>
    <published>2019-12-21T12:49:00.000Z</published>
    <updated>2019-12-22T08:38:04.914Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>参考书籍《机器学习实战》,《机器学习》。<br><strong>KNN算法</strong></p><p>kNN也叫k-近邻算法是一种分类与回归算法，属于监督学习算法。工作原理是：存在一个训练样本集，其中的每一个数据都有一个对应的标签，这个标签就是它所属分类的对应关系。我们输入一个新数据后，将新数据的特征与训练集中的特征进行比较，然后算法根据其特征，提取样本中最相似(最近邻)的分类标签。就拿爱情片和动作片来说，其中接吻镜头和打斗场面就相当于其特征，爱情片和动作片就相当于分类标签。我们只选择样本数据中的前k个最相似的数据，通常k不大于20，然后根据这k个相似数据中出现的最多的分类，作为新数据的分类。</p><p>k近邻算法的一般流程<br>(1)收集数据：可以使用任何方法<br>(2)准备数据：计算距离，最好是结构化的数据格式<br>(3)分析数据：可以使用任何方法<br>(4)训练算法：此步骤不适用kNN<br>(5)测试算法：计算错误率<br>(6)使用算法：首先输入样本数据和结构化的输出结果，然后运行kNN 判定输入的数据属于哪个分类，最后应用对计算出的分类执行后续的处理。</p><p><strong>用python实现</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> operator <span class="comment">#导入numpy 和 运算符模块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createDataSet</span><span class="params">()</span>:</span></span><br><span class="line">    group = array([[<span class="number">1.0</span>,<span class="number">1.1</span>],[<span class="number">1.0</span>,<span class="number">1.1</span>],[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0.1</span>]])</span><br><span class="line">    labels = [<span class="string">'A'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'B'</span>]</span><br><span class="line">    <span class="keyword">return</span> group, labels</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> kNN</span><br><span class="line">group,labels = kNN.createDataSet()</span><br><span class="line">group</span><br><span class="line">out[]:array([[<span class="number">1.</span> , <span class="number">1.1</span>],</span><br><span class="line">       [<span class="number">1.</span> , <span class="number">1.1</span>],</span><br><span class="line">       [<span class="number">0.</span> , <span class="number">0.</span> ],</span><br><span class="line">       [<span class="number">0.</span> , <span class="number">0.1</span>]])</span><br><span class="line">labels</span><br><span class="line">out[]</span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'B'</span>]</span><br></pre></td></tr></table></figure></div><p>以上是一些准备工作，我们解析并加载了数据。接下来进行进一步实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">伪代码</span><br><span class="line">1，计算已知类别数据集中的点与当前点的距离</span><br><span class="line">2，按照距离递增次序排序</span><br><span class="line">3，选取与当前距离最小的k个点</span><br><span class="line">4，确定前k个点所在类别的出现频率</span><br><span class="line">5，返回前k个点出现频率最高的类别作为当前点的预测分类</span><br></pre></td></tr></table></figure></div><p>inX为待分类数据，dataSet为训练数据集，labels对应dataSet每一行数据的标签(类型),k表示用于选择最近邻居的数目<br>shape[0]表示最外围的数组的维数,如果是二维，shape[0]表示行数，shape[1]表示列数<br>tile(inX, (dataSetSize,1)) 创建一个numpy的array，dataSetSize行，每行数据是inX<br>-dataSet 矩阵减法 m<em>n矩阵A - m</em>n矩阵B<a href="https://www.fly1103.com/2019/08/23/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8/#more" target="_blank" rel="noopener">详细函数说明戳这</a></p><p>距离公式：$$d=\sqrt{(xA_0-xB_0)<sup>{2}+(xA_1-xB_1)</sup>{2}}$$</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify0</span><span class="params">(inX, dataSet, labels, k)</span>:</span> </span><br><span class="line">    dataSetsize = dataSet.shape[<span class="number">0</span>]   </span><br><span class="line">    diffMat = tile(inX, (dataSetSize,<span class="number">1</span>)) - dataSet    </span><br><span class="line">    sqDiffMat = diffMat**<span class="number">2</span></span><br><span class="line">    sqDiffMat = diffMat.sum(axis = <span class="number">1</span>) <span class="comment">#横向求和，得到一个新的矩阵</span></span><br><span class="line">    distances = sqDistances**<span class="number">0.5</span> <span class="comment">#至此完成距离计算</span></span><br><span class="line"></span><br><span class="line">    sortdDistIndicies = distance.argsort() </span><br><span class="line">    classCount = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        voteIlabel = labels[sortdDistIndicies[i]]</span><br><span class="line">        clssCount[voteIlabel] = classCount.get(voteIlabel,<span class="number">0</span>) + <span class="number">1</span> <span class="comment">#选择距离最小的k个点</span></span><br><span class="line">    sortedClassCount = sorted(classCount.iteritems(),key = operator.itemgetter(<span class="number">1</span>),reverse = <span class="literal">True</span>)  <span class="comment">#完成排序</span></span><br><span class="line">    <span class="keyword">return</span> sortedClassCount[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure></div><p>为了预测数据所在分类<br><code>kNN.classify0([0,0],group,labels,3)</code><br>输出B为正确结果<br>之后我又将《机器学习实战》中的示例1：<em>使用kNN改进约会网站的配对效果</em>码了一遍放在<a href="https://github.com/fly1103/machine-learning" target="_blank" rel="noopener">我的github了</a><br>当然了其中也读了一些人的博客。<br><a href="https://blog.csdn.net/c406495762/article/details/75172850" target="_blank" rel="noopener">更多详细说明看dalao博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://fly1103.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="KNN" scheme="http://fly1103.com/tags/KNN/"/>
    
  </entry>
  
  <entry>
    <title>观云</title>
    <link href="http://fly1103.com/2019/12/20/cloud/"/>
    <id>http://fly1103.com/2019/12/20/cloud/</id>
    <published>2019-12-20T12:14:19.000Z</published>
    <updated>2019-12-20T16:31:51.096Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>离家很远处是有一排山的，放眼望去，看不到尽头。小时候随着父母一起上田，独自一人会去抓各种昆虫玩，比如一两只蛐蛐，还有蚂蚱，至于蝴蝶却是很难抓到，当我小心翼翼地靠近它们，手还没来得及伸出去，它们便一追一赶地飞走了，只留我一人失望的坐在田边。实在无聊，便去看眼前的山，是在远处，只能看清那大概的轮廓，以至于我后来都看厌了。然而，当那山头的云缓缓飘过时，我的心头便会感到一阵惊喜。云，变化莫测，怎么看都看不厌。</p><p>儿时不懂事，对什么都会感到好奇，闲时就会抬起头，白天看飞过的鸟儿，看飘过的云朵，晚上则会看漂亮的银河，看漫天的星星。世上没有两片相同的树叶，也没有两朵相同的云。于是我便喜欢盯着云看，而且盯得很紧，不由自主得你会发现，它突然会成为一个有趣的云。<br>有时它像我家的猫阿黄，有时它又像那只可爱的小汪。真的是越看越发有趣，不经意间它又会成为另一番模样。厚重点的云大多是从山那边飘来的，它很耐看，我可以一直目送着它归去，看它变幻的经过。而那些薄薄的云很不经看，半天也看不出什么名堂。</p><p>这些都是普通的云，可爱极了。清晨，它们像一块澡巾，将太阳擦得炽热，纯洁，黄昏，它们又宛如一片薄被，轻轻得盖在夕阳身上。它们也会调皮，也会胆小，当阳光越发炽热，越发刺眼时，它们便灰溜溜得躲得远远的，不敢靠近。当那热度稍减，它们又会慢悠悠得飘过去。当然，每逢下雨天，它们气势凶猛得很，它们肆意地将天空遮盖，雷鸣是它们的怒吼，雨水是它们的武器，仿佛整个世界都将属于它们。然而，这一切都是徒劳，太阳终于还是出来了，光明冲破了层层云雾，照向大地。一位小女孩拉着妈妈的手说，雨后的感觉真好，人们也纷纷高兴地说，今年必定是个丰收年！看呐，这位有脾气而又不失可爱的朋友还会做好事。</p><p>离开了故乡，来到了大的都市，街上的行人来来往往，不曾会有人去仰头看看天空。他们随着熙熙攘攘的人潮去种种旅游景点，却忘了天空也是一处风景。现在的我，依旧喜欢看云。与以往不同的是，我开始喜欢看轻薄的云，淡淡的云。阿黄早已失踪，小汪也在不久前老去了。我有时就在想，那些云里是不是就存有它们的影子呢。那么它们是从家乡飘过来的吧，历经了奔波，所以才会变得如此的轻，如此的淡。我有点羡慕它们，它们为何就能去往世界各地呢？而我却只能苟且的活着。云是不说话的，它什么都不懂，我心里暗笑。从远方却又传来它嗝嗝的笑声，原来它什么都懂的，它将我的悲伤带向了远方，化作了阵阵清风。</p><p>我只有一个很小的心愿，我希望这些云儿可以慢一点，再慢一点，让时间长一点。等一等这万千世界忙碌的人们，让它们可以在匆忙之中驻足，去看看头顶的云，看看它们那可爱的模样。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="写作" scheme="http://fly1103.com/categories/%E5%86%99%E4%BD%9C/"/>
    
    
      <category term="随想" scheme="http://fly1103.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
</feed>
